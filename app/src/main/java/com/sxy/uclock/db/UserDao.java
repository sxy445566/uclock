package com.sxy.uclock.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sxy.uclock.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserID = new Property(0, Long.class, "userID", true, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserPhoneNum = new Property(2, String.class, "userPhoneNum", false, "USER_PHONE_NUM");
        public final static Property UserPassword = new Property(3, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property UserIcon = new Property(4, String.class, "userIcon", false, "USER_ICON");
        public final static Property UserWeChat = new Property(5, String.class, "userWeChat", false, "USER_WE_CHAT");
        public final static Property UserQQ = new Property(6, String.class, "userQQ", false, "USER_QQ");
        public final static Property UserSina = new Property(7, String.class, "userSina", false, "USER_SINA");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USER_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userID
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_PHONE_NUM\" TEXT NOT NULL UNIQUE ," + // 2: userPhoneNum
                "\"USER_PASSWORD\" TEXT NOT NULL ," + // 3: userPassword
                "\"USER_ICON\" TEXT," + // 4: userIcon
                "\"USER_WE_CHAT\" TEXT," + // 5: userWeChat
                "\"USER_QQ\" TEXT," + // 6: userQQ
                "\"USER_SINA\" TEXT);"); // 7: userSina
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(1, userID);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindString(3, entity.getUserPhoneNum());
        stmt.bindString(4, entity.getUserPassword());
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(5, userIcon);
        }
 
        String userWeChat = entity.getUserWeChat();
        if (userWeChat != null) {
            stmt.bindString(6, userWeChat);
        }
 
        String userQQ = entity.getUserQQ();
        if (userQQ != null) {
            stmt.bindString(7, userQQ);
        }
 
        String userSina = entity.getUserSina();
        if (userSina != null) {
            stmt.bindString(8, userSina);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.getString(offset + 2), // userPhoneNum
            cursor.getString(offset + 3), // userPassword
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userIcon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userWeChat
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userQQ
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userSina
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPhoneNum(cursor.getString(offset + 2));
        entity.setUserPassword(cursor.getString(offset + 3));
        entity.setUserIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserWeChat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserQQ(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserSina(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
