package com.sxy.uclock.db;

import android.os.Parcel;
import android.os.Parcelable;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "WORK_AND_REST_DETAILS".
 */
public class WorkAndRestDetails implements Parcelable {
    public static final int DETAILS_TYPE_WAR = 1;
    public static final int DETAILS_TYPE_WEEK = 2;
    public static final int DETAILS_TYPE_MONTH = 3;
    public static final int DETAILS_TYPE_IMPORTANT = 4;
    private Long detailsID;
    private Long templateID;
    private int detailsType;
    private String detailsDate;
    private String detailsTime;
    private String detailsDescribe;
    private Boolean detailsIsUsing;
    private Boolean detailsIsDelModel;//删除模式
    private Boolean detailsIsDelChecked;

    public Boolean getDetailsIsDelModel() {
        return detailsIsDelModel;
    }

    public void setDetailsIsDelModel(Boolean detailsIsDelModel) {
        this.detailsIsDelModel = detailsIsDelModel;
    }

    public Boolean getDetailsIsDelChecked() {
        return detailsIsDelChecked;
    }

    public void setDetailsIsDelChecked(Boolean detailsIsDelChecked) {
        this.detailsIsDelChecked = detailsIsDelChecked;
    }

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient WorkAndRestDetailsDao myDao;

    private WorkAndRestTemplate workAndRestTemplate;
    private Long workAndRestTemplate__resolvedKey;


    public WorkAndRestDetails() {
        this.detailsIsUsing = true;
        this.detailsIsDelModel = false;
        this.detailsIsDelChecked = false;
    }

    public WorkAndRestDetails(Long detailsID) {
        this.detailsID = detailsID;
        this.detailsIsUsing = true;
        this.detailsIsDelModel = false;
        this.detailsIsDelChecked = false;
    }

    public WorkAndRestDetails(Long detailsID, Long templateID, int detailsType, String detailsDate, String detailsTime, String detailsDescribe, boolean detailsIsUsing) {
        this.detailsID = detailsID;
        this.templateID = templateID;
        this.detailsType = detailsType;
        this.detailsDate = detailsDate;
        this.detailsTime = detailsTime;
        this.detailsDescribe = detailsDescribe;
        this.detailsIsUsing = detailsIsUsing;
        this.detailsIsDelModel = false;
        this.detailsIsDelChecked = false;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWorkAndRestDetailsDao() : null;
    }

    public Long getDetailsID() {
        return detailsID;
    }

    public void setDetailsID(Long detailsID) {
        this.detailsID = detailsID;
    }

    public Long getTemplateID() {
        return templateID;
    }

    public void setTemplateID(Long templateID) {
        this.templateID = templateID;
    }

    public int getDetailsType() {
        return detailsType;
    }

    public void setDetailsType(int detailsType) {
        this.detailsType = detailsType;
    }

    public String getDetailsDate() {
        return detailsDate;
    }

    public void setDetailsDate(String detailsDate) {
        this.detailsDate = detailsDate;
    }

    public String getDetailsTime() {
        return detailsTime;
    }

    public void setDetailsTime(String detailsTime) {
        this.detailsTime = detailsTime;
    }

    public String getDetailsDescribe() {
        return detailsDescribe;
    }

    public void setDetailsDescribe(String detailsDescribe) {
        this.detailsDescribe = detailsDescribe;
    }

    public Boolean getDetailsIsUsing() {
        return detailsIsUsing;
    }

    public void setDetailsIsUsing(Boolean detailsIsUsing) {
        this.detailsIsUsing = detailsIsUsing;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public WorkAndRestTemplate getWorkAndRestTemplate() {
        Long __key = this.templateID;
        if (workAndRestTemplate__resolvedKey == null || !workAndRestTemplate__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkAndRestTemplateDao targetDao = daoSession.getWorkAndRestTemplateDao();
            WorkAndRestTemplate workAndRestTemplateNew = targetDao.load(__key);
            synchronized (this) {
                workAndRestTemplate = workAndRestTemplateNew;
                workAndRestTemplate__resolvedKey = __key;
            }
        }
        return workAndRestTemplate;
    }

    public void setWorkAndRestTemplate(WorkAndRestTemplate workAndRestTemplate) {
        synchronized (this) {
            this.workAndRestTemplate = workAndRestTemplate;
            templateID = workAndRestTemplate == null ? null : workAndRestTemplate.getTemplateID();
            workAndRestTemplate__resolvedKey = templateID;
        }
    }

    /**
     * Convenient call for
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.detailsID);
        dest.writeValue(this.templateID);
        dest.writeInt(this.detailsType);
        dest.writeString(this.detailsDate);
        dest.writeString(this.detailsTime);
        dest.writeString(this.detailsDescribe);
        dest.writeValue(this.detailsIsUsing);
        dest.writeValue(this.detailsIsDelModel);
        dest.writeValue(this.detailsIsDelChecked);
        dest.writeParcelable(this.workAndRestTemplate, 0);
        dest.writeValue(this.workAndRestTemplate__resolvedKey);
    }

    protected WorkAndRestDetails(Parcel in) {
        this.detailsID = (Long) in.readValue(Long.class.getClassLoader());
        this.templateID = (Long) in.readValue(Long.class.getClassLoader());
        this.detailsType = in.readInt();
        this.detailsDate = in.readString();
        this.detailsTime = in.readString();
        this.detailsDescribe = in.readString();
        this.detailsIsUsing = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.detailsIsDelModel = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.detailsIsDelChecked = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.workAndRestTemplate = in.readParcelable(WorkAndRestTemplate.class.getClassLoader());
        this.workAndRestTemplate__resolvedKey = (Long) in.readValue(Long.class.getClassLoader());
    }

    public static final Parcelable.Creator<WorkAndRestDetails> CREATOR = new Parcelable.Creator<WorkAndRestDetails>() {
        public WorkAndRestDetails createFromParcel(Parcel source) {
            return new WorkAndRestDetails(source);
        }

        public WorkAndRestDetails[] newArray(int size) {
            return new WorkAndRestDetails[size];
        }
    };
}
