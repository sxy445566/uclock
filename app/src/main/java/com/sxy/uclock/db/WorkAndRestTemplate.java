package com.sxy.uclock.db;

import android.databinding.BaseObservable;
import android.databinding.Bindable;
import android.os.Parcel;
import android.os.Parcelable;

import com.sxy.uclock.BR;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "WORK_AND_REST_TEMPLATE".
 */
public class WorkAndRestTemplate extends BaseObservable implements Parcelable {

    private Long templateID;
    private Long userID;
    /** Not-null value. */
    private String templateName;
    /** Not-null value. */
    private String templateDays;
    private boolean templateIsUsing;
    private  boolean templateIsDelModel;

    public boolean isTemplateIsDelModel() {
        return templateIsDelModel;
    }

    public void setTemplateIsDelModel(boolean templateIsDelModel) {
        this.templateIsDelModel = templateIsDelModel;
    }

    public boolean isTemplateIsDelChecked() {
        return templateIsDelChecked;
    }

    public void setTemplateIsDelChecked(boolean templateIsDelChecked) {
        this.templateIsDelChecked = templateIsDelChecked;
    }

    private  boolean templateIsDelChecked;
    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WorkAndRestTemplateDao myDao;

    private User user;
    private Long user__resolvedKey;

    private List<WorkAndRestDetails> warDetails;

    public WorkAndRestTemplate() {
        this.templateIsUsing=true;
        this.templateIsDelModel=false;
        this.templateIsDelChecked=false;
    }

    public WorkAndRestTemplate(Long templateID) {
        this.templateID = templateID;
        this.templateIsUsing=true;
        this.templateIsDelModel=false;
        this.templateIsDelChecked=false;
    }

    public WorkAndRestTemplate(Long templateID, Long userID, String templateName, String templateDays, boolean templateIsUsing) {
        this.templateID = templateID;
        this.userID = userID;
        this.templateName = templateName;
        this.templateDays = templateDays;
        this.templateIsUsing=templateIsUsing;
        this.templateIsDelModel=false;
        this.templateIsDelChecked=false;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWorkAndRestTemplateDao() : null;
    }
    @Bindable
    public Long getTemplateID() {
        return templateID;
    }

    public void setTemplateID(Long templateID) {
        this.templateID = templateID;
        notifyPropertyChanged(BR.templateID);
    }
    @Bindable
    public Long getUserID() {
        return userID;
    }

    public void setUserID(Long userID) {
        this.userID = userID;
        notifyPropertyChanged(BR.userID);
    }

    /** Not-null value. */
    @Bindable
    public String getTemplateName() {
        return templateName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTemplateName(String templateName) {
        this.templateName = templateName;
        notifyPropertyChanged(BR.templateName);
    }

    /** Not-null value. */
    @Bindable
    public String getTemplateDays() {
        return templateDays;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTemplateDays(String templateDays) {
        this.templateDays = templateDays;
        notifyPropertyChanged(BR.templateDays);
    }
    @Bindable
    public boolean getTemplateIsUsing() {
        return templateIsUsing;
    }

    public void setTemplateIsUsing(boolean templateIsUsing) {
        this.templateIsUsing = templateIsUsing;
        notifyPropertyChanged(BR.templateIsUsing);
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userID;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userID = user == null ? null : user.getUserID();
            user__resolvedKey = userID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WorkAndRestDetails> getWarDetails() {
        if (warDetails == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkAndRestDetailsDao targetDao = daoSession.getWorkAndRestDetailsDao();
            List<WorkAndRestDetails> warDetailsNew = targetDao._queryWorkAndRestTemplate_WarDetails(templateID);
            synchronized (this) {
                if(warDetails == null) {
                    warDetails = warDetailsNew;
                }
            }
        }
        return warDetails;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWarDetails() {
        warDetails = null;
    }

    /** Convenient call for  */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for  */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.templateID);
        dest.writeValue(this.userID);
        dest.writeString(this.templateName);
        dest.writeString(this.templateDays);
        dest.writeByte(templateIsUsing ? (byte) 1 : (byte) 0);
        dest.writeByte(templateIsDelModel ? (byte) 1 : (byte) 0);
        dest.writeByte(templateIsDelChecked ? (byte) 1 : (byte) 0);
        dest.writeParcelable(this.user, flags);
        dest.writeValue(this.user__resolvedKey);
        dest.writeList(this.warDetails);
    }

    protected WorkAndRestTemplate(Parcel in) {
        this.templateID = (Long) in.readValue(Long.class.getClassLoader());
        this.userID = (Long) in.readValue(Long.class.getClassLoader());
        this.templateName = in.readString();
        this.templateDays = in.readString();
        this.templateIsUsing = in.readByte() != 0;
        this.templateIsDelModel = in.readByte() != 0;
        this.templateIsDelChecked = in.readByte() != 0;
        this.user = in.readParcelable(User.class.getClassLoader());
        this.user__resolvedKey = (Long) in.readValue(Long.class.getClassLoader());
        this.warDetails = new ArrayList<WorkAndRestDetails>();
        in.readList(this.warDetails, List.class.getClassLoader());
    }

    public static final Parcelable.Creator<WorkAndRestTemplate> CREATOR = new Parcelable.Creator<WorkAndRestTemplate>() {
        public WorkAndRestTemplate createFromParcel(Parcel source) {
            return new WorkAndRestTemplate(source);
        }

        public WorkAndRestTemplate[] newArray(int size) {
            return new WorkAndRestTemplate[size];
        }
    };
}
