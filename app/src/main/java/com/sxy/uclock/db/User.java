package com.sxy.uclock.db;

import android.databinding.BaseObservable;
import android.os.Parcel;
import android.os.Parcelable;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User extends BaseObservable implements Parcelable {

    private Long userID;
    private String userName;
    /** Not-null value. */
    private String userPhoneNum;
    /** Not-null value. */
    private String userPassword;
    private String userIcon;
    private String userWeChat;
    private String userQQ;
    private String userSina;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<WorkAndRestTemplate> warTemplate;

    public User() {
    }

    public User(Long userID) {
        this.userID = userID;
    }

    public User(Long userID, String userName, String userPhoneNum, String userPassword, String userIcon, String userWeChat, String userQQ, String userSina) {
        this.userID = userID;
        this.userName = userName;
        this.userPhoneNum = userPhoneNum;
        this.userPassword = userPassword;
        this.userIcon = userIcon;
        this.userWeChat = userWeChat;
        this.userQQ = userQQ;
        this.userSina = userSina;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getUserID() {
        return userID;
    }

    public void setUserID(Long userID) {
        this.userID = userID;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    /** Not-null value. */
    public String getUserPhoneNum() {
        return userPhoneNum;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserPhoneNum(String userPhoneNum) {
        this.userPhoneNum = userPhoneNum;
    }

    /** Not-null value. */
    public String getUserPassword() {
        return userPassword;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserPassword(String userPassword) {
        this.userPassword = userPassword;
    }

    public String getUserIcon() {
        return userIcon;
    }

    public void setUserIcon(String userIcon) {
        this.userIcon = userIcon;
    }

    public String getUserWeChat() {
        return userWeChat;
    }

    public void setUserWeChat(String userWeChat) {
        this.userWeChat = userWeChat;
    }

    public String getUserQQ() {
        return userQQ;
    }

    public void setUserQQ(String userQQ) {
        this.userQQ = userQQ;
    }

    public String getUserSina() {
        return userSina;
    }

    public void setUserSina(String userSina) {
        this.userSina = userSina;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WorkAndRestTemplate> getWarTemplate() {
        if (warTemplate == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkAndRestTemplateDao targetDao = daoSession.getWorkAndRestTemplateDao();
            List<WorkAndRestTemplate> warTemplateNew = targetDao._queryUser_WarTemplate(userID);
            synchronized (this) {
                if(warTemplate == null) {
                    warTemplate = warTemplateNew;
                }
            }
        }
        return warTemplate;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWarTemplate() {
        warTemplate = null;
    }

    /** Convenient call for  */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for*/
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.userID);
        dest.writeString(this.userName);
        dest.writeString(this.userPhoneNum);
        dest.writeString(this.userPassword);
        dest.writeString(this.userIcon);
        dest.writeString(this.userWeChat);
        dest.writeString(this.userQQ);
        dest.writeString(this.userSina);
        dest.writeTypedList(warTemplate);
    }

    protected User(Parcel in) {
        this.userID = (Long) in.readValue(Long.class.getClassLoader());
        this.userName = in.readString();
        this.userPhoneNum = in.readString();
        this.userPassword = in.readString();
        this.userIcon = in.readString();
        this.userWeChat = in.readString();
        this.userQQ = in.readString();
        this.userSina = in.readString();
        this.warTemplate = in.createTypedArrayList(WorkAndRestTemplate.CREATOR);
    }

    public static final Parcelable.Creator<User> CREATOR = new Parcelable.Creator<User>() {
        public User createFromParcel(Parcel source) {
            return new User(source);
        }

        public User[] newArray(int size) {
            return new User[size];
        }
    };
}
